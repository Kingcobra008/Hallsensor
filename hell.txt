// read RPM

#include <ESP8266WiFi.h>
 

 
#include <Wire.h>
#include <ACROBOTIC_SSD1306.h>
 
WiFiClient client;

 

const byte led1 = 13;
const byte led2 = 15;

int hall_1 = 12;
int hall_2 = 0;
volatile int rpmcount = 0;//see http://arduino.cc/en/Reference/Volatile
int rpm = 0;
unsigned long lastmillis = 0;

volatile int rpmcount2 = 0;//see http://arduino.cc/en/Reference/Volatile
int rpm2 = 0;
unsigned long lastmillis2 = 0;
 


 void displayOled(int rpm,int hz, int rpm2,int hz2){
    oled.clearDisplay(); 
    oled.setTextXY(1,0);
    oled.putString("Check : 1 ");
    oled.setTextXY(2,0);  
    oled.putString("RPM : ");
    oled.setTextXY(2,10);  
    oled.putString(String(rpm));
    oled.setTextXY(3,0);  
    oled.putString("Hz : ");
    oled.setTextXY(3,10);  
    oled.putString(String(hz));
 
    oled.setTextXY(4,0);
    oled.putString("Check : 2 ");
    oled.setTextXY(5,0);  
    oled.putString("RPM : ");
    oled.setTextXY(5,10);  
    oled.putString(String(rpm2));
    oled.setTextXY(6,0);  
    oled.putString("Hz : ");
    oled.setTextXY(6,10);  
    oled.putString(String(hz2));
    
 }  


void statusLed(int rpm,int rpm2 ){

  if(rpm > 1000){
    digitalWrite(led1,HIGH);
  } 
  else{
     digitalWrite(led1,LOW);
  }

  
  if(rpm2 > 1000){
    digitalWrite(led2,HIGH);
  } else{
     digitalWrite(led2,LOW);
  }

  
}
 
void rpm_fan2(){ /* this code will be executed every time the interrupt 0 (pin2) gets low.*/ 
      rpmcount2++;
}

void rpm_fan(){ /* this code will be executed every time the interrupt 0 (pin2) gets low.*/ 
      rpmcount++;
}


void setup(){
   Serial.begin(9600);
     attachInterrupt(hall_1, rpm_fan, FALLING);//interrupt cero (0) is on pin two(2).
     attachInterrupt(hall_2, rpm_fan2, FALLING);//interrupt cero (0) is on pin two(2).
     Wire.begin();  
     oled.init(); 
     oled.clearDisplay(); 
     pinMode(led1, OUTPUT);
     pinMode(led2, OUTPUT); 
     digitalWrite(led1,LOW);
     digitalWrite(led2,LOW);
     displayOled(0,0,0,0 );
     
}




void loop(){
  //  delay(10);
   //Serial.println(lastmillis); //print the word "RPM" and tab.
   // if ((millis() - lastmillis == 1000) || (millis() - lastmillis2 == 1000)){ /*Uptade every one second, this will be equal to reading frecuency (Hz).*/
    if ( millis() - lastmillis == 1000 ){ /*Uptade every one second, this will be equal to reading frecuency (Hz).*/
          
          detachInterrupt(hall_1); //Disable interrupt when calculating
          attachInterrupt(hall_1, rpm_fan, FALLING); //enable interrupt
       //   detachInterrupt(hall_2); //Disable interrupt when calculating
       //   attachInterrupt(hall_2, rpm_fan2, FALLING); //enable interrupt
          rpm = rpmcount * 60; /* Convert frecuency to RPM, note: this works for one interruption per full rotation. For two interrups per full rotation use rpmcount * 30.*/ 
          rpm2 = rpmcount2 * 60;
//           Serial.print("RPM =\t"); //print the word "RPM" and tab.
//          Serial.print(rpm ); // print the rpm value.
//           Serial.print("\t RPM =\t"); //print the word "RPM" and tab.
//          Serial.println(rpm2); // print the rpm value.
//          Serial.print("\t Hz=\t"); //print the word "Hz".
//          Serial.println(rpmcount); /*print revolutions per second or Hz. And print new line or enter.*/
          displayOled(rpm,rpmcount,rpm2,rpmcount2 );
          statusLed(rpm,rpm2);
       //    Serial.print("------------"); 
          rpmcount = 0; // Restart the RPM counter
          rpmcount2 = 0; // Restart the RPM counter
          lastmillis = millis(); // Uptade lasmillis
         attachInterrupt(hall_1, rpm_fan, FALLING); //enable interrupt
         attachInterrupt(hall_2, rpm_fan2, FALLING); //enable interrupt  
    }
//
//  
}
 